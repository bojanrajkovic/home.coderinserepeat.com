name: Terraform Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - "terraform/**/*.tf"
      - ".github/workflows/terraform-validation.yml"
  push:
    branches:
      - main
    paths:
      - "terraform/**/*.tf"
  workflow_dispatch:

jobs:
  discover-modules:
    name: Discover Terraform modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.find-modules.outputs.modules }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Find Terraform modules
        id: find-modules
        run: |
          # Find all directories containing terraform.tf files
          modules=$(find terraform -type f -name "terraform.tf" -exec dirname {} \; | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "modules=$modules" >> $GITHUB_OUTPUT
          echo "Found modules:"
          echo "$modules" | jq -r '.[]'

  validate-modules:
    name: Validate ${{ matrix.module }}
    runs-on: ubuntu-latest
    needs: discover-modules
    if: needs.discover-modules.outputs.modules != '[]'

    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.modules) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install mise and OpenTofu
        uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
        with:
          install: true
          cache: true

      - name: Create terraform alias for tofu
        run: |
          sudo ln -sf $(which tofu) /usr/local/bin/terraform
          terraform --version

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ matrix.module }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: ${{ matrix.module }}
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ matrix.module }}
        continue-on-error: true

      - name: Check results
        if: steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: |
          echo "::error::Validation failed for ${{ matrix.module }}"
          exit 1

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@b466648d6e39e7c75324f25d83891162a721f2d6 # v1.0.3
        with:
          working_directory: terraform
          format: sarif
          soft_fail: false
          additional_args: --config-file=.tfsec.yaml

      - name: Upload tfsec SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@755f44910c12a3d7ca0d8c6e42c048b3362f7cec # v3
        with:
          sarif_file: results.sarif

  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@90f302c255ef959cbfb4bd10581afecdb7ece3e6 # v4
        with:
          tflint_version: "latest"

      - name: Initialize TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TFLint
        run: |
          # Run tflint on each Terraform directory
          find terraform -type f -name "terraform.tf" -exec dirname {} \; | sort -u | while read dir; do
            echo "Linting $dir..."
            tflint --config=.tflint.hcl --chdir="$dir" || exit 1
          done

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-modules, security-scan, lint]
    if: always()

    steps:
      - name: Check validation results
        run: |
          if [[ "${{ needs.validate-modules.result }}" == "failure" || \
                "${{ needs.security-scan.result }}" == "failure" || \
                "${{ needs.lint.result }}" == "failure" ]]; then
            echo "::error::One or more validation checks failed"
            exit 1
          fi
          echo "âœ… All Terraform validation checks passed!"
